#!/bin/bash
PI_HOSTS=("blueparking@192.168.106.201" )
PI_PATH="/opt/parkingMonitor"
PI_PASSWORD="blueparking"

# Check if expect is available
if ! command -v expect &> /dev/null; then
    echo "Error: 'expect' is required but not installed."
    echo "Install it with: brew install expect (on macOS) or apt-get install expect (on Ubuntu)"
    exit 1
fi

# Function to execute SSH commands with password
ssh_with_password() {
    local host=$1
    local commands=$2
    expect -c "
        spawn ssh $host \"$commands\"
        expect {
            \"continue connecting\" {
                send \"yes\r\"
                exp_continue
            }
            \"password:\" {
                send \"$PI_PASSWORD\r\"
            }
        }
        expect {
            \"sudo\" {
                send \"$PI_PASSWORD\r\"
                exp_continue
            }
            eof
        }
    "
}

# Function to copy files with password
scp_with_password() {
    local files=$1
    local destination=$2
    expect -c "
        spawn scp $files $destination
        expect {
            \"continue connecting\" {
                send \"yes\r\"
                exp_continue
            }
            \"password:\" {
                send \"$PI_PASSWORD\r\"
            }
        }
        expect eof
    "
}

# Function to test connection
test_connection() {
    echo "Testing connection to Pi..."
    if ! ping -c 1 $(echo $PI_HOST | cut -d@ -f2) &> /dev/null; then
        echo "Cannot reach Pi at ${PI_HOST}"
        echo "Please enter new Pi IP address:"
        read new_ip
        PI_HOST="blueparking@${new_ip}"
    fi
}

# Function to force kill any process using port 3031
force_free_port() {
    echo "Force killing any process using port 3031..."
    ssh_with_password $PI_HOST "sudo fuser -k 3031/tcp || true && sudo docker ps -q | xargs -r docker stop && sudo docker system prune -f"
}

# Function to clean up existing services
cleanup_services() {
    echo "Cleaning up existing services..."
    ssh_with_password $PI_HOST "cd $PI_PATH && docker compose -p pm down || true && sudo systemctl stop parking-monitor || true && sudo systemctl disable parking-monitor || true && sudo rm -f /etc/systemd/system/parking-monitor.service && sudo systemctl daemon-reload"
}

check_docker() {
    echo "Checking Docker installation on Pi..."
    if ! ssh_with_password $PI_HOST "command -v docker > /dev/null"; then
        echo "Installing Docker on Pi..."
        ssh_with_password $PI_HOST "curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh && sudo usermod -aG docker blueparking"
    fi

    echo "Checking Docker Compose installation..."
    if ! ssh_with_password $PI_HOST "command -v docker-compose > /dev/null"; then
        echo "Installing Docker Compose on Pi..."
        ssh_with_password $PI_HOST "sudo apt update && sudo apt install -y docker-compose"
    fi
}

check_docker_daemon() {
    echo "Checking if Docker daemon is running..."
    if ! docker info > /dev/null 2>&1; then
        echo "Docker daemon is not running. Starting Docker..."
        open -a Docker
        # Wait for Docker to start
        while ! docker info > /dev/null 2>&1; do
            echo "Waiting for Docker to start..."
            sleep 5
        done
        echo "Docker daemon is now running"
    fi
}

verify_usb_device() {
    echo "Verifying USB device..."
    ssh_with_password $PI_HOST "sudo ls -l /dev/ttyUSB* && sudo udevadm trigger && sudo chmod 777 /dev/ttyUSB0 || true"
}

# Main deployment flow
for PI_HOST in "${PI_HOSTS[@]}"; do
    echo "Deploying to $PI_HOST..."
    test_connection
    check_docker
    check_docker_daemon

    # Build and prepare deployment
    echo "Building Docker image..."
    docker build -t parking-monitor:latest .

    echo "Creating directory on Pi..."
    ssh_with_password $PI_HOST "mkdir -p $PI_PATH"

    echo "Copying files to Pi..."
    scp_with_password "docker-compose.yml ./deployment/parking-monitor.service" "$PI_HOST:$PI_PATH/"
    
    echo "Copying source files to build on server..."
    scp_with_password "-r ./app.js ./config ./routes ./services ./views ./package.json ./package-lock.json ./Dockerfile" "$PI_HOST:$PI_PATH/"

    # Clean up existing deployment
    cleanup_services

    # Deploy new version
    echo "Deploying to Pi..."
    ssh_with_password $PI_HOST "cd $PI_PATH && docker build -t parking-monitor:latest . && docker compose -p pm up -d && sudo cp parking-monitor.service /etc/systemd/system/ && sudo systemctl daemon-reload && sudo systemctl enable parking-monitor"

    # Verify deployment
    echo "Checking Docker containers status..."
    ssh_with_password $PI_HOST "cd $PI_PATH && docker compose -p pm ps"

    # Setup USB devices and test
    echo "Testing endpoints..."
    ssh_with_password $PI_HOST "sleep 3 && curl -s http://localhost:3031/clock && curl -s http://localhost:3031/reset-usb"
    verify_usb_device

    echo "Deployment complete!"
done

echo "Deployment script completed successfully!"